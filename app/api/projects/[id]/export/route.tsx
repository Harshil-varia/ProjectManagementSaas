// app/api/projects/[id]/export/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { NEXT_AUTH_CONFIG } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import * as XLSX from 'xlsx'

interface RouteParams {
  params: {
    id: string
  }
}

export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const session = await getServerSession(NEXT_AUTH_CONFIG)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id: projectId } = params
    const { searchParams } = new URL(request.url)
    const format = searchParams.get('format') || 'csv'
    const year = parseInt(searchParams.get('year') || new Date().getFullYear().toString())

    // Check permissions
    const hasPermission = session.user.role === 'ADMIN' || 
      await prisma.projectPermission.findFirst({
        where: {
          userId: session.user.id,
          projectId,
          permission: { in: ['VIEW_REPORTS', 'EDIT_BUDGETS', 'FULL_ACCESS'] }
        }
      })

    if (!hasPermission) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    // Get project and time entries with detailed information
    const project = await prisma.project.findUnique({
      where: { id: projectId },
      select: {
        id: true,
        name: true,
        description: true,
        color: true,
        totalBudget: true,
        q1Budget: true,
        q2Budget: true,
        q3Budget: true,
        q4Budget: true,
        q1Spent: true,
        q2Spent: true,
        q3Spent: true,
        q4Spent: true
      }
    })

    if (!project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 })
    }

    const startDate = new Date(year, 3, 1) // April
    const endDate = new Date(year + 1, 2, 31) // March next year

    const timeEntries = await prisma.timeEntry.findMany({
      where: {
        projectId,
        date: {
          gte: startDate,
          lte: endDate
        }
      },
      include: {
        user: {
          select: {
            name: true,
            email: true,
            employeeRate: true
          }
        }
      },
      orderBy: [
        { date: 'asc' },
        { user: { name: 'asc' } }
      ]
    })

    // Prepare data for export
    const exportData = timeEntries.map(entry => ({
      Date: entry.date.toISOString().split('T')[0],
      Employee: entry.user.name || 'N/A',
      Email: entry.user.email,
      Hours: Number(entry.hours).toFixed(2),
      'Hourly Rate': Number(entry.user.employeeRate).toFixed(2),
      Cost: (Number(entry.hours) * Number(entry.user.employeeRate)).toFixed(2),
      Description: entry.description || '',
      'Start Time': entry.startTime ? entry.startTime.toISOString() : '',
      'End Time': entry.endTime ? entry.endTime.toISOString() : '',
      Duration: entry.duration ? `${entry.duration} minutes` : ''
    }))

    // Calculate summary data
    const totalHours = timeEntries.reduce((sum, entry) => sum + Number(entry.hours), 0)
    const totalCost = timeEntries.reduce((sum, entry) => 
      sum + (Number(entry.hours) * Number(entry.user.employeeRate)), 0)
    
    const uniqueEmployees = new Set(timeEntries.map(entry => entry.user.email)).size
    
    if (format === 'excel') {
      // Create Excel workbook
      const workbook = XLSX.utils.book_new()
      
      // Summary sheet
      const summaryData = [
        ['Project Report Summary'],
        [''],
        ['Project Name', project.name],
        ['Report Period', `FY ${year}/${year + 1}`],
        ['Generated On', new Date().toLocaleDateString()],
        ['Generated By', session.user.name || session.user.email],
        [''],
        ['Summary Statistics'],
        ['Total Hours', totalHours.toFixed(2)],
        ['Total Cost', `$${totalCost.toFixed(2)}`],
        ['Number of Employees', uniqueEmployees],
        ['Number of Entries', timeEntries.length],
        [''],
        ['Budget Information'],
        ['Total Budget', `$${Number(project.totalBudget).toFixed(2)}`],
        ['Q1 Budget', `$${Number(project.q1Budget).toFixed(2)}`],
        ['Q2 Budget', `$${Number(project.q2Budget).toFixed(2)}`],
        ['Q3 Budget', `$${Number(project.q3Budget).toFixed(2)}`],
        ['Q4 Budget', `$${Number(project.q4Budget).toFixed(2)}`],
        [''],
        ['Quarterly Spending'],
        ['Q1 Spent', `$${Number(project.q1Spent).toFixed(2)}`],
        ['Q2 Spent', `$${Number(project.q2Spent).toFixed(2)}`],
        ['Q3 Spent', `$${Number(project.q3Spent).toFixed(2)}`],
        ['Q4 Spent', `$${Number(project.q4Spent).toFixed(2)}`],
        ['Total Spent', `$${(Number(project.q1Spent) + Number(project.q2Spent) + Number(project.q3Spent) + Number(project.q4Spent)).toFixed(2)}`]
      ]
      
      const summarySheet = XLSX.utils.aoa_to_sheet(summaryData)
      
      // Style the summary sheet
      summarySheet['!cols'] = [
        { width: 20 },
        { width: 25 }
      ]
      
      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary')
      
      // Time entries sheet
      const entriesSheet = XLSX.utils.json_to_sheet(exportData)
      
      // Style the entries sheet
      entriesSheet['!cols'] = [
        { width: 12 }, // Date
        { width: 20 }, // Employee
        { width: 25 }, // Email
        { width: 10 }, // Hours
        { width: 12 }, // Hourly Rate
        { width: 10 }, // Cost
        { width: 30 }, // Description
        { width: 20 }, // Start Time
        { width: 20 }, // End Time
        { width: 15 }  // Duration
      ]
      
      XLSX.utils.book_append_sheet(workbook, entriesSheet, 'Time Entries')
      
      // Employee summary sheet
      const employeeSummary = new Map()
      timeEntries.forEach(entry => {
        const key = entry.user.email
        if (!employeeSummary.has(key)) {
          employeeSummary.set(key, {
            Employee: entry.user.name || 'N/A',
            Email: entry.user.email,
            'Hourly Rate': Number(entry.user.employeeRate).toFixed(2),
            'Total Hours': 0,
            'Total Cost': 0,
            'Entry Count': 0
          })
        }
        const summary = employeeSummary.get(key)
        summary['Total Hours'] += Number(entry.hours)
        summary['Total Cost'] += Number(entry.hours) * Number(entry.user.employeeRate)
        summary['Entry Count'] += 1
      })
      
      const employeeSummaryData = Array.from(employeeSummary.values()).map(emp => ({
        ...emp,
        'Total Hours': emp['Total Hours'].toFixed(2),
        'Total Cost': emp['Total Cost'].toFixed(2)
      }))
      
      const employeeSheet = XLSX.utils.json_to_sheet(employeeSummaryData)
      employeeSheet['!cols'] = [
        { width: 20 }, // Employee
        { width: 25 }, // Email
        { width: 12 }, // Hourly Rate
        { width: 12 }, // Total Hours
        { width: 12 }, // Total Cost
        { width: 12 }  // Entry Count
      ]
      
      XLSX.utils.book_append_sheet(workbook, employeeSheet, 'Employee Summary')
      
      // Generate Excel buffer
      const excelBuffer = XLSX.write(workbook, { 
        type: 'buffer', 
        bookType: 'xlsx',
        compression: true
      })
      
      // Clean up project name for filename
      const cleanProjectName = project.name.replace(/[^a-zA-Z0-9]/g, '_')
      const filename = `${cleanProjectName}_${year}_detailed_report.xlsx`
      
      return new NextResponse(excelBuffer, {
        headers: {
          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'Content-Disposition': `attachment; filename="${filename}"`
        }
      })
    }
    
    if (format === 'csv') {
      // Generate CSV
      const csvHeaders = Object.keys(exportData[0] || {}).join(',')
      const csvRows = exportData.map(row => 
        Object.values(row).map(value => 
          typeof value === 'string' && value.includes(',') 
            ? `"${value.replace(/"/g, '""')}"` 
            : value
        ).join(',')
      )
      
      const csvContent = [csvHeaders, ...csvRows].join('\n')
      
      const cleanProjectName = project.name.replace(/[^a-zA-Z0-9]/g, '_')
      const filename = `${cleanProjectName}_${year}_detailed_report.csv`
      
      return new NextResponse(csvContent, {
        headers: {
          'Content-Type': 'text/csv',
          'Content-Disposition': `attachment; filename="${filename}"`
        }
      })
    }

    // Default JSON export
    return NextResponse.json({
      project,
      summary: {
        totalHours,
        totalCost,
        uniqueEmployees,
        entryCount: timeEntries.length
      },
      timeEntries: exportData
    })

  } catch (error) {
    console.error('Failed to export report:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}